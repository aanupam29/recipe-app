{"version":3,"sources":["components/Header.js","components/Recipes.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","search","onInputChange","onSearchClick","className","type","placeholder","aria-label","aria-describedby","value","onChange","id","onClick","Recipes","recipes","map","recipe","src","image","label","calories","ingredients","ingredient","text","App","useState","setSearch","setRecipes","useEffect","getRecipes","a","Axios","get","res","data","hits","e","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gRAkBeA,G,MAhBA,SAACC,GAAW,IAChBC,EAAwCD,EAAxCC,OAAQC,EAAgCF,EAAhCE,cAAeC,EAAiBH,EAAjBG,cAC9B,OACI,yBAAKC,UAAY,aACb,wBAAIA,UAAY,qBAAhB,mBACA,6BACA,yBAAKA,UAAU,iCACX,2BAAOC,KAAK,OAAOD,UAAU,eAAeE,YAAY,cAAcC,aAAW,cAAcC,mBAAiB,gBAAgBC,MAAOR,EAAQS,SAAUR,IACzJ,yBAAKE,UAAU,sBACX,4BAAQA,UAAU,4BAA4BC,KAAK,SAASM,GAAG,gBAAgBC,QAAST,GAAxF,sBCmBLU,EA5BC,SAACb,GAAW,IACjBc,EAAWd,EAAXc,QACP,OACI,yBAAKV,UAAU,OAEXU,EAAQC,KAAI,SAAAC,GAAM,OACd,yBAAKZ,UAAU,YACX,yBAAKA,UAAU,uCACX,yBAAKa,IAAKD,EAAOA,OAAOE,MAAOd,UAAU,cACzC,yBAAKA,UAAU,aACX,wBAAIA,UAAU,yBAAyBY,EAAOA,OAAOG,OACrD,yBAAKf,UAAU,+DAAf,eACiBY,EAAOA,OAAOI,WAGpC,wBAAIhB,UAAU,+BACRY,EAAOA,OAAOK,YAAYN,KAAI,SAAAO,GAAU,OACrC,wBAAIlB,UAAU,mBAAmBkB,EAAWC,iB,iBCqB7DC,EAlCH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACTxB,EADS,KACDyB,EADC,OAEcD,mBAAS,IAFvB,mBAETX,EAFS,KAEAa,EAFA,KAOhBC,qBAAW,WACTC,MACC,IAEH,IAAMA,EAAU,uCAAG,4BAAAC,EAAA,sEACCC,IAAMC,IAAI,mCAAqC/B,EAArC,6DADX,OACXgC,EADW,OAEjBN,EAAWM,EAAIC,KAAKC,MAFH,2CAAH,qDAahB,OACE,yBAAK/B,UAAU,OACb,kBAAC,EAAD,CAAQH,OAAQA,EAAQC,cAVN,SAACkC,GACnBV,EAAUU,EAAEC,OAAO5B,QASmCN,cANpC,WACpB0B,OAME,yBAAKzB,UAAU,aACb,kBAAC,EAAD,CAASU,QAASA,OCtBNwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4868a494.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = (props) => {\r\n    const {search, onInputChange, onSearchClick} = props\r\n    return (\r\n        <div className = \"jumbotron\">\r\n            <h1 className = \"display-4 mx-auto\">Food Recipe App</h1>\r\n            <br />\r\n            <div className=\"input-group mb-3 w-50 mx-auto\">\r\n                <input type=\"text\" className=\"form-control\" placeholder=\"Recipe Name\" aria-label=\"Recipe Name\" aria-describedby=\"button-addon2\" value={search} onChange={onInputChange} />\r\n                <div className=\"input-group-append\">\r\n                    <button className=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\" onClick={onSearchClick}>Search Recipe</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react';\r\n\r\nconst Recipes = (props) => {\r\n    const {recipes} = props\r\n    return (\r\n        <div className=\"row\">\r\n        {\r\n            recipes.map(recipe => (\r\n                <div className=\"col-md-3\">\r\n                    <div className=\"card text-black bg-dark text-center\">\r\n                        <img src={recipe.recipe.image} className=\"img-fluid\" />\r\n                        <div className=\"card-body\">\r\n                            <h4 className=\"card-title text-white\">{recipe.recipe.label}</h4>\r\n                            <div className=\"card-header bg-secondary text-white shadow p-3 mb-5 rounded\">\r\n                                Calories -  {recipe.recipe.calories}\r\n                            </div>\r\n                       </div>\r\n                       <ul className=\"list-group list-group-flush\">\r\n                            {recipe.recipe.ingredients.map(ingredient => (\r\n                                <li className=\"list-group-item\">{ingredient.text}</li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            ))\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recipes","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Header from './components/Header'\nimport Recipes from './components/Recipes'\nimport Axios from 'axios'\n\nconst App = () => {\n  const [search, setSearch] = useState(\"\")\n  const [recipes, setRecipes] = useState([])\n\n  const APP_ID = \"77e22adb\"\n  const APP_KEY = \"d863282359c41d6f170e0cf69cad35da\"\n\n  useEffect( () => {\n    getRecipes();\n  }, [])\n\n  const getRecipes = async () => {\n    const res = await Axios.get('https://api.edamam.com/search?q=' + search + '&app_id=' + APP_ID + '&app_key=' + APP_KEY)\n    setRecipes(res.data.hits)\n  }\n\n  const onInputChange = (e) => {\n      setSearch(e.target.value)\n  }\n\n  const onSearchClick = () => {\n    getRecipes();\n  }\n\n  return (\n    <div className=\"App\">\n      <Header search={search} onInputChange={onInputChange} onSearchClick={onSearchClick}/>\n      <div className=\"container\">\n        <Recipes recipes={recipes}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}